name: Mac Runner

on:
  workflow_dispatch:
    inputs:
      action:
        description: The action to perform
        type: choice
        default: apply
        options:
        - apply
        - destroy
      environment:
        description: The environment to target
        type: environment
        default: qa-aws
  workflow_call: 
    inputs:
      action:
        description: The action to perform
        type: string
        default: apply
      environment:
        description: The environment to target
        type: string
        default: qa-aws
    secrets:
      DUPLO_TOKEN:
        description: The token to authenticate with Duplo
      GH_APP_KEY:
        description: The private key for the GitHub App
        required: true

jobs:
  launch_runner:
    name: Launch Runner
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      DUPLO_HOST: ${{ vars.DUPLO_HOST }}
      DUPLO_TOKEN: ${{ secrets.DUPLO_TOKEN }}
      DUPLO_TENANT: ${{ vars.DUPLO_TENANT }}
      AWS_CONFIG_FILE: config/aws
      AWS_PROFILE: test
      INSTANCE_TYPE: mac2-m2.metal
    steps:

    - name: Setup
      id: setup
      uses: duplocloud/duploctl/.github/actions/setup@main
      with:
        install: "."
        app-id: ${{ vars.GH_APP_ID }}
        private-key: ${{ secrets.GH_APP_KEY }}

    - name: AWS Login
      id: aws-login
      run: |
        mkdir -p config
        export AWS_DEFAULT_REGION="$(duploctl tenant region -o string -q region)"
        export AWS_REGION=$AWS_DEFAULT_REGION
        duploctl jit update_aws_config $AWS_PROFILE --admin
        echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
        echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV

    - name: Install Script
      id: install-script
      run: |
        USER_DATA="$(sed -e 's/$GH_RUNNER_TOKEN/${{ secrets.GH_RUNNER_TOKEN }}/g' ./scripts/runner_install.sh | base64)"
        echo "USER_DATA<<EOF" >> $GITHUB_ENV
        echo "$USER_DATA" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Find AMI
      id: find-ami
      run: |
        AMI_ID="$(aws ssm get-parameter \
        --name /aws/service/ec2-macos/sonoma/arm64_mac/latest/image_id \
        --region $AWS_REGION \
        --query "Parameter.Value" \
        --output text)"
        echo "Found AMI: $AMI_ID"
        echo "ami=${AMI_ID}" >> $GITHUB_OUTPUT

    - name: Allocate Host
      id: allocate-host
      run: |
        HOST_ID="$(aws ec2 describe-hosts \
        --query "Hosts[?contains(Tags[].Key, 'duploctl')] | [0].HostId"
        --output text)"
        echo "Found host: $HOST_ID"
        if [ "$HOST_ID" == "None" ]; then
          HOST_ID="$(aws ec2 allocate-hosts \
          --region $AWS_REGION \
          --instance-type $INSTANCE_TYPE \
          --availability-zone ${AWS_REGION}b \
          --auto-placement "on" \
          --quantity 1 \
          --tag-specifications 'ResourceType=dedicated-host,Tags={Key=duploctl,Value=true}' \
          --query 'HostIds[0]' \
          --output text)"
          echo "Created host: $HOST_ID"
        fi
        echo "host_id=${HOST_ID}" >> $GITHUB_OUTPUT

    - name: Launch Runner
      id: launch-runner
      env:
        AMI_ID: ${{ steps.find-ami.outputs.ami }}
      run: |
        INSTANCE_ID="$(aws ec2 run-instances \
        --region $AWS_REGION \
        --instance-type $INSTANCE_TYPE \
        --placement Tenancy=host \
        --image-id $AMI_ID \
        --user-data "$USER_DATA" \
        --query 'Instances[0].InstanceId' \
        --output text)"
        echo "Launched instance: $INSTANCE_ID"
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "Instance is running"
        aws ec2 describe-instance-status --instance-ids $INSTANCE_ID
        echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
